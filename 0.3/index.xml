<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pdfmake</title>
    <link>https://pdfmake.github.io/docs/0.3/</link>
    <description>Recent content on pdfmake</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://pdfmake.github.io/docs/0.3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building font file via PHP script</title>
      <link>https://pdfmake.github.io/docs/0.3/fonts/custom-fonts-client-side/vfs/php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/fonts/custom-fonts-client-side/vfs/php/</guid>
      <description>For a complete description of use custom fonts in client-side, read the article: Custom fonts (client-side) &amp;gt; via Virtual file system (VFS)
If you don&amp;rsquo;t want to install nodejs and/or just downloaded pdfMake and want to use custom fonts in client-side, you can generate the vfs_fonts.js with an PHP script as well. Put the code below in a file on a server with the font files you want to include in the same directory and view it in a browser.</description>
    </item>
    
    <item>
      <title>Building font file via shell script</title>
      <link>https://pdfmake.github.io/docs/0.3/fonts/custom-fonts-client-side/vfs/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/fonts/custom-fonts-client-side/vfs/shell/</guid>
      <description>For a complete description of use custom fonts in client-side, read the article: Custom fonts (client-side) &amp;gt; via Virtual file system (VFS)
If you don&amp;rsquo;t want to install nodejs and/or just downloaded pdfMake and want to use custom fonts in client-side, you can generate the vfs_fonts.js with an bash-script as well:
#!/bin/sh  if [ -t 1 ]; then target=&amp;#34;vfs_fonts.js&amp;#34; else target=&amp;#34;/dev/stdout&amp;#34; fi ( echo &amp;#34;var vfs = {&amp;#34; for file in &amp;#34;$@&amp;#34;; do file=$1 filename=$(basename $file) filecontent=$(base64 -w 0 $file) shift echo &amp;#34;\&amp;#34;${filename}\&amp;#34;:\&amp;#34;${filecontent}\&amp;#34;&amp;#34; if [ &amp;#34;$#&amp;#34; -gt 0 ]; then echo &amp;#34;,&amp;#34; fi done echo &amp;#34;}&amp;#34; echo &amp;#34;; var _global = typeof window === &amp;#39;object&amp;#39; ?</description>
    </item>
    
    <item>
      <title>Methods</title>
      <link>https://pdfmake.github.io/docs/0.3/getting-started/client-side/methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/getting-started/client-side/methods/</guid>
      <description>Base usage This call will generate a PDF document, methods to get document are described below.
pdfMake.createPdf(docDefinition); pdfMake.createPdf(docDefinition, options); Parameters:
 docDefinition - object with document definition, see chapter options (optional) - advanced options see options chapter  Download the PDF pdfMake.createPdf(docDefinition).download(); pdfMake.createPdf(docDefinition).download(&amp;#39;file.pdf&amp;#39;); Parameters:
 filename (optional) - PDF document file name (default &amp;lsquo;file.pdf&amp;rsquo;)  Open the PDF in a new window pdfMake.createPdf(docDefinition).open(); pdfMake.createPdf(docDefinition).open(win); Parameters:
 win (optional) - window (when an asynchronous operation)  Name can be defined only by using metadata title property (see Document metadata).</description>
    </item>
    
    <item>
      <title>Supported browsers</title>
      <link>https://pdfmake.github.io/docs/0.3/getting-started/client-side/supported-browsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/getting-started/client-side/supported-browsers/</guid>
      <description>Edge Firefox Chrome Chrome (Android) Opera Safari (iOS) Safari (iOS) iPhone  LimitationsMethods open() and print() are supported only in:
 Firefox Chrome Opera  Add-ons used in browsers can affect the functionality of pdfmake (especially for open() and print()). If pdfmake is not working try disable add-ons in browser.Problematic add-onsAdBlockFully description is available in issue.</description>
    </item>
    
    <item>
      <title>Supported Node.js versions</title>
      <link>https://pdfmake.github.io/docs/0.3/getting-started/server-side/supported-nodejs-versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/getting-started/server-side/supported-nodejs-versions/</guid>
      <description> 18 LTS (End-of-life: April 2025) 20 LTS (End-of-life: April 2026)  </description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>https://pdfmake.github.io/docs/0.3/getting-started/client-side/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/getting-started/client-side/examples/</guid>
      <description>Check out the playground and examples.</description>
    </item>
    
    <item>
      <title>Methods</title>
      <link>https://pdfmake.github.io/docs/0.3/getting-started/server-side/methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/getting-started/server-side/methods/</guid>
      <description>Base usage This call will generate a PDF document, methods to get document are described below.
pdfmake.createPdf(docDefinition); pdfmake.createPdf(docDefinition, options); Parameters:
 docDefinition - object with document definition, see chapter options (optional) - advanced options see options chapter  Write the PDF document as file pdfmake.createPdf(docDefinition).write(filename).then(() =&amp;gt; { // finished }, err =&amp;gt; { console.error(err); }); Parameters:
 filename - PDF document file name options (optional) - advanced options see options chapter  Get the PDF document as URL data pdfmake.</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>https://pdfmake.github.io/docs/0.3/getting-started/server-side/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/getting-started/server-side/examples/</guid>
      <description>see examples and dev-playground server script</description>
    </item>
    
    <item>
      <title>Icons</title>
      <link>https://pdfmake.github.io/docs/0.3/fonts/icons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/fonts/icons/</guid>
      <description>make a font at http://fontello.com/ or something and download it
  from font file (for example .ttf) create vfs_fonts.js file (see how to use custom fonts)
  define font in js (just defining normal might be enough):
pdfMake.fonts = { Fontello: { normal: &amp;#39;fontello.ttf&amp;#39;, bold: &amp;#39;fontello.ttf&amp;#39;, italics: &amp;#39;fontello.ttf&amp;#39;, bolditalics: &amp;#39;fontello.ttf&amp;#39; } }   add a style for icons:  icon: {font: &#39;Fontello&#39;}
  make a text paragraph: { text: &#39;ï‡«&#39;, style: &#39;icon&#39; }, //icon wifi</description>
    </item>
    
    <item>
      <title>Standard 14 fonts</title>
      <link>https://pdfmake.github.io/docs/0.3/fonts/standard-14-fonts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/fonts/standard-14-fonts/</guid>
      <description>PDF contains standard 14 fonts.
Attention! This fonts supports only ANSI code page (only english characters)!
Use in pdfmake on server-side Example of usage:
var fonts = { Courier: { normal: &amp;#39;Courier&amp;#39;, bold: &amp;#39;Courier-Bold&amp;#39;, italics: &amp;#39;Courier-Oblique&amp;#39;, bolditalics: &amp;#39;Courier-BoldOblique&amp;#39; }, Helvetica: { normal: &amp;#39;Helvetica&amp;#39;, bold: &amp;#39;Helvetica-Bold&amp;#39;, italics: &amp;#39;Helvetica-Oblique&amp;#39;, bolditalics: &amp;#39;Helvetica-BoldOblique&amp;#39; }, Times: { normal: &amp;#39;Times-Roman&amp;#39;, bold: &amp;#39;Times-Bold&amp;#39;, italics: &amp;#39;Times-Italic&amp;#39;, bolditalics: &amp;#39;Times-BoldItalic&amp;#39; }, Symbol: { normal: &amp;#39;Symbol&amp;#39; }, ZapfDingbats: { normal: &amp;#39;ZapfDingbats&amp;#39; } }; var pdfmake = require(&amp;#39;pdfmake&amp;#39;); pdfmake.</description>
    </item>
    
    <item>
      <title>Styling</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/styling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/styling/</guid>
      <description>pdfmake makes it possible to style any paragraph or its part:
var docDefinition = { content: [ // if you don&amp;#39;t need styles, you can use a simple string to define a paragraph  &amp;#39;This is a standard paragraph, using default style&amp;#39;, // using a { text: &amp;#39;...&amp;#39; } object lets you set styling properties  { text: &amp;#39;This paragraph will have a bigger font&amp;#39;, fontSize: 15 }, // if you set the value of text to an array instead of a string, you&amp;#39;ll be able  // to style any part individually  { text: [ &amp;#39;This paragraph is defined as an array of elements to make it possible to &amp;#39;, { text: &amp;#39;restyle part of it and make it bigger &amp;#39;, fontSize: 15 }, &amp;#39;than the rest.</description>
    </item>
    
    <item>
      <title>Columns</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/columns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/columns/</guid>
      <description>By default paragraphs are rendered as a vertical stack of elements (one below another). It is possible however to divide available space into columns.
var docDefinition = { content: [ &amp;#39;This paragraph fills full width, as there are no columns. Next paragraph however consists of three columns&amp;#39;, { columns: [ { // auto-sized columns have their widths based on their content  width: &amp;#39;auto&amp;#39;, text: &amp;#39;First column&amp;#39; }, { // star-sized columns fill the remaining space  // if there&amp;#39;s more than one star-column, available width is divided equally  width: &amp;#39;*&amp;#39;, text: &amp;#39;Second column&amp;#39; }, { // fixed width  width: 100, text: &amp;#39;Third column&amp;#39; }, { // % width  width: &amp;#39;20%&amp;#39;, text: &amp;#39;Fourth column&amp;#39; } ], // optional space between columns  columnGap: 10 }, &amp;#39;This paragraph goes below all columns and has full width&amp;#39; ] }; Column content is not limited to a simple text.</description>
    </item>
    
    <item>
      <title>Tables</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/tables/</guid>
      <description>Conceptually tables are similar to columns. They can however have headers, borders and cells spanning over multiple columns/rows.
The table node expects a valid table value. If the value is invalid or empty, an error is thrown. This includes the table.body property as well.var docDefinition = { content: [ { layout: &amp;#39;lightHorizontalLines&amp;#39;, // optional  table: { // headers are automatically repeated if the table spans over multiple pages  // you can declare how many rows should be treated as headers  headerRows: 1, widths: [ &amp;#39;*&amp;#39;, &amp;#39;auto&amp;#39;, 100, &amp;#39;*&amp;#39; ], body: [ [ &amp;#39;First&amp;#39;, &amp;#39;Second&amp;#39;, &amp;#39;Third&amp;#39;, &amp;#39;The last one&amp;#39; ], [ &amp;#39;Value 1&amp;#39;, &amp;#39;Value 2&amp;#39;, &amp;#39;Value 3&amp;#39;, &amp;#39;Value 4&amp;#39; ], [ { text: &amp;#39;Bold value&amp;#39;, bold: true }, &amp;#39;Val 2&amp;#39;, &amp;#39;Val 3&amp;#39;, &amp;#39;Val 4&amp;#39; ] ] } } ] }; Table-cell properties  fillColor: string: the background color of a table cell fillOpacity: string: the background opacity of a table cell  Table layouts Can be used layout property for set table layout.</description>
    </item>
    
    <item>
      <title>Lists</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/lists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/lists/</guid>
      <description>pdfmake supports both numbered and bulleted lists:
var docDefinition = { content: [ &amp;#39;Bulleted list example:&amp;#39;, { // to treat a paragraph as a bulleted list, set an array of items under the ul key  ul: [ &amp;#39;Item 1&amp;#39;, &amp;#39;Item 2&amp;#39;, &amp;#39;Item 3&amp;#39;, { text: &amp;#39;Item 4&amp;#39;, bold: true }, ] }, &amp;#39;Numbered list example:&amp;#39;, { // for numbered lists set the ol key  ol: [ &amp;#39;Item 1&amp;#39;, &amp;#39;Item 2&amp;#39;, &amp;#39;Item 3&amp;#39; ] } ] }; </description>
    </item>
    
    <item>
      <title>Headers and footers</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/headers-footers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/headers-footers/</guid>
      <description>Page headers and footers in pdfmake can be: static or dynamic.
They use the same syntax:
var docDefinition = { header: &amp;#39;simple text&amp;#39;, footer: { columns: [ &amp;#39;Left part&amp;#39;, { text: &amp;#39;Right part&amp;#39;, alignment: &amp;#39;right&amp;#39; } ] }, content: (...) }; For dynamically generated content (including page numbers, page count and page size) you can pass a function to the header or footer:
var docDefinition = { footer: function(currentPage, pageCount) { return currentPage.</description>
    </item>
    
    <item>
      <title>Background-layer</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/background-layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/background-layer/</guid>
      <description>The background-layer will be added on every page.
var docDefinition = { background: &amp;#39;simple text&amp;#39;, content: (...) }; It may contain any other object as well (images, tables, &amp;hellip;) or be dynamically generated:
var docDefinition = { background: function(currentPage, pageSize) { return `page ${currentPage}with size ${pageSize.width}x ${pageSize.height}` }, content: (...) }; </description>
    </item>
    
    <item>
      <title>Margins</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/margins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/margins/</guid>
      <description>Any element in pdfMake can have a margin:
(...) // margin: [left, top, right, bottom] { text: &amp;#39;sample&amp;#39;, margin: [ 5, 2, 10, 20 ] }, // margin: [horizontal, vertical] { text: &amp;#39;another text&amp;#39;, margin: [5, 2] }, // margin: equalLeftTopRightBottom { text: &amp;#39;last one&amp;#39;, margin: 5 } (...) </description>
    </item>
    
    <item>
      <title>Stack of paragraphs</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/stack/</guid>
      <description>You could have figured out by now (from the examples), that if you set the content key to an array, the document becomes a stack of paragraphs.
You&amp;rsquo;ll quite often reuse this structure in a nested element, like in the following example:
var docDefinition = { content: [ &amp;#39;paragraph 1&amp;#39;, &amp;#39;paragraph 2&amp;#39;, { columns: [ &amp;#39;first column is a simple text&amp;#39;, [ // second column consists of paragraphs  &amp;#39;paragraph A&amp;#39;, &amp;#39;paragraph B&amp;#39;, &amp;#39;these paragraphs will be rendered one below another inside the column&amp;#39; ] ] } ] }; The problem with an array is that you cannot add styling properties to it (to change fontSize for example).</description>
    </item>
    
    <item>
      <title>Images</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/images/</guid>
      <description>This is simple. Just use the { image: &#39;...&#39; } node type.
JPEG and PNG formats are supported.
The image node expects a valid image value. If the value is invalid or empty, an error is thrown.var docDefinition = { content: [ { // you&amp;#39;ll most often use dataURI images on the browser side  // if no width/height/fit is provided, the original size will be used  image: &amp;#39;data:image/jpeg;base64,.</description>
    </item>
    
    <item>
      <title>SVGs</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/svgs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/svgs/</guid>
      <description>SVGs are much like images except it is not currently possible to refer to SVGs by file or re-use from a dictionary.
The SVG node expects a valid SVG value. If the value is invalid or empty, an error is thrown.Library SVG-to-PDFKit is used to transformation from SVG to PDF document.
var docDefinition = { content: [ { // If no width/height/fit is used, then dimensions from the svg element is used.</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/links/</guid>
      <description>To add external or internal links, use the following syntax:
{ text: &amp;#39;google&amp;#39;, link: &amp;#39;http://google.com&amp;#39; } { text: &amp;#39;Go to page 2&amp;#39;, linkToPage: 2 } { text: &amp;#39;Go to Header&amp;#39;, linkToDestination: &amp;#39;header&amp;#39; }, { text: &amp;#39;Header content&amp;#39;, id: &amp;#39;header&amp;#39; }, Or link to local computer file:
var dd = { content: [ { text: &amp;#39;link&amp;#39;, link: &amp;#39;file:///c:/testFile.txt&amp;#39; } ] }; Properties  link (string) - URL to external site linkToPage (number) - link to page number linkToDestination (string) - link to document destination  </description>
    </item>
    
    <item>
      <title>QR code</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/qr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/qr/</guid>
      <description>var docDefinition = { content: [ // basic usage  { qr: &amp;#39;text in QR&amp;#39; }, // colored QR  { qr: &amp;#39;text in QR&amp;#39;, foreground: &amp;#39;red&amp;#39;, background: &amp;#39;yellow&amp;#39; }, // resized QR  { qr: &amp;#39;text in QR&amp;#39;, fit: &amp;#39;500&amp;#39; }, ] } Properties:
 qr: string - text in QR code foreground: string (optional, default black) - foreground color background: string (optional, default white) - background color fit: integer (optional) - fit the output QR image version: integer (optional) - QR version range from 1 to 40 (for details see wikipedia.</description>
    </item>
    
    <item>
      <title>Table of contents</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/toc/</guid>
      <description>The simplest example of a table of contents:
var docDefinition = { content: [ { toc: { title: {text: &amp;#39;INDEX&amp;#39;, style: &amp;#39;header&amp;#39;} } }, { text: &amp;#39;This is a header&amp;#39;, style: &amp;#39;header&amp;#39;, tocItem: true } ] } If id is used in toc, the tocItem can target that id:
var docDefinition = { content: [ { toc: { id: &amp;#39;mainToc&amp;#39;, title: {text: &amp;#39;INDEX&amp;#39;, style: &amp;#39;header&amp;#39;} } }, { text: &amp;#39;This is a header&amp;#39;, style: &amp;#39;header&amp;#39;, tocItem: &amp;#39;mainToc&amp;#39; } ] } If multiple Table of Contents are used, tocItem can be used to place the text in the correct toc:</description>
    </item>
    
    <item>
      <title>Watermark</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/watermark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/watermark/</guid>
      <description>Properties  text - watermark text color - color of text opacity opacity of text bold - bold style of text italics - italics style of text fontSize - own font size of text (ideal size is calculated automatically) angle - angle of text rotation  Examples Example of simple basic usage:
var docDefinition = { watermark: &amp;#39;test watermark&amp;#39;, content: [ &amp;#39;...&amp;#39; ] }; Example of font style:
var docDefinition = { watermark: { text: &amp;#39;test watermark&amp;#39;, color: &amp;#39;blue&amp;#39;, opacity: 0.</description>
    </item>
    
    <item>
      <title>Page dimensions, orientation and margins</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/page/</guid>
      <description>var docDefinition = { // a string or { width: number, height: number }  pageSize: &amp;#39;A5&amp;#39;, // by default we use portrait, you can change it to landscape if you wish  pageOrientation: &amp;#39;landscape&amp;#39;, // [left, top, right, bottom] or [horizontal, vertical] or just a number for equal margins  pageMargins: [ 40, 60, 40, 60 ], }; If you set pageSize to a string, you can use one of the following values:</description>
    </item>
    
    <item>
      <title>Document Metadata</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/document-medatadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/document-medatadata/</guid>
      <description>PDF documents can have various metadata associated with them, such as the title, or author of the document. You can add that information by adding it to the document definition
var docDefinition = { info: { title: &amp;#39;awesome Document&amp;#39;, author: &amp;#39;john doe&amp;#39;, subject: &amp;#39;subject of document&amp;#39;, keywords: &amp;#39;keywords for document&amp;#39;, }, content: &amp;#39;This is an sample PDF printed with pdfMake&amp;#39; } Standard properties:
 title - the title of the document author - the name of the author subject - the subject of the document keywords - keywords associated with the document creator - the creator of the document (default is &amp;lsquo;pdfmake&amp;rsquo;) producer - the producer of the document (default is &amp;lsquo;pdfmake&amp;rsquo;) creationDate - the date the document was created (added automatically by pdfmake) modDate - the date the document was last modified trapped - the trapped flag in a PDF document indicates whether the document has been &amp;ldquo;trapped&amp;rdquo;, i.</description>
    </item>
    
    <item>
      <title>Patterns</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/patterns/</guid>
      <description>Patterns can be defined as a dictionary of predefined patterns in the document definition.
Only tiling patterns are supported.
Pattern definition Each pattern is defined using:
 boundingBox - bounding box used to clip the pattern cell xStep - horizontal spacing between cells yStep - vertical spacing between cells pattern - a PDF stream of operations that render the graphics/text of the cell  For more information on each property and patterns in general see the PDF reference, section 4.</description>
    </item>
    
    <item>
      <title>Compression</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/compression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/compression/</guid>
      <description>Compression of PDF is enabled by default, use compress: false for disable:
var docDefinition = { compress: false, content: (...) }; </description>
    </item>
    
    <item>
      <title>Encryption and access privileges</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/security/</guid>
      <description>var docDefinition = { userPassword: &amp;#39;123&amp;#39;, ownerPassword: &amp;#39;123456&amp;#39;, permissions: { printing: &amp;#39;highResolution&amp;#39;, //&amp;#39;lowResolution&amp;#39;  modifying: false, copying: false, annotating: true, fillingForms: true, contentAccessibility: true, documentAssembly: true }, content: [ &amp;#39;...&amp;#39; ] }; PDF document allow you to encrypt the PDF file and require a password when opening the file, and/or set permissions of what users can do with the PDF file.
To enable encryption set user password in userPassword (string value).</description>
    </item>
    
    <item>
      <title>Attachments embedding</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/attachments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/attachments/</guid>
      <description>Minimal version: 0.3.0-beta.2pdfmake supports attaching files as annotations as well as embedded files. Embedded files are added in the &amp;ldquo;files&amp;rdquo; dictionary and will show up in supported pdf viewers in their respective attachment panels. File attachments are annotations which link to a file. Any attachment or embedded file must provide at least a &amp;ldquo;src&amp;rdquo;, providing a filename through &amp;ldquo;name&amp;rdquo; is highly recommended. The &amp;ldquo;src&amp;rdquo; of any attachment can be provided in dataURL format (like the following attachment, taken from http://www.</description>
    </item>
    
    <item>
      <title>PDF/A</title>
      <link>https://pdfmake.github.io/docs/0.3/document-definition-object/pdfa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/document-definition-object/pdfa/</guid>
      <description>Minimal version: 0.3.0-beta.12PDF/A is specialized for use in the archiving and long-term preservation of electronic documents.
PDF version 1.4 or above is required.
var docDefinition = { version: &amp;#39;1.5&amp;#39;, subset: &amp;#39;PDF/A-3a&amp;#39;, tagged: true, displayTitle: true, info: { title: &amp;#39;Awesome PDF document from pdfmake&amp;#39; }, content: [ &amp;#39;PDF/A document for archive&amp;#39; ] }; Supported PDF versions (property version):
 1.3 - PDF version 1.3 (default) not supported PDF/A 1.4 - PDF version 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pdfmake.github.io/docs/0.3/_footer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pdfmake.github.io/docs/0.3/_footer/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
